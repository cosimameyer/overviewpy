{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"overviewpy","text":"<p>overviewpy aims to make it easy to get an overview of a data set by displaying relevant sample information. </p>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install overviewpy\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#implemented-functions","title":"Implemented Functions","text":"<p>The goal of <code>overviewpy</code> is to make it easy to get an overview of a data set by displaying relevant sample information. At the moment, there are the following functions:</p> <ul> <li><code>overview_tab</code> generates a tabular overview of the sample (and returns a data frame). The general sample plots a two-column table that provides information on an id in the left column and a the time frame on the right column.</li> <li><code>overview_na</code> plots an overview of missing values by variable (both by row and by column)</li> </ul>"},{"location":"#overview_tab","title":"<code>overview_tab</code>","text":"<p>Generate some general overview of the data set using the time and scope conditions with <code>overview_tab</code>. The resulting data frame collapses the time condition for each <code>id</code> by taking into account potential gaps in the time frame.</p> <pre><code>from overviewpy.overviewpy import overview_tab\nimport pandas as pd\n\ndata = {\n       'id': ['RWA', 'RWA', 'RWA', 'GAB', 'GAB', 'FRA', \\\n        'FRA', 'BEL', 'BEL', 'ARG'],\n       'year': [2022, 2023, 2021, 2023, 2020, 2019, 2015, \\\n        2014, 2013, 2002]\n   }\n\ndf = pd.DataFrame(data)\n\ndf_overview = overview_tab(df=df, id='id', time='year')\n</code></pre>"},{"location":"#overview_na","title":"<code>overview_na</code>","text":"<p><code>overview_na</code> is a simple function that provides information about the content of all variables in your data, not only the time and scope conditions. It returns a horizontal ggplot bar plot that indicates the amount of missing data (NAs) for each variable (on the y-axis). You can choose whether to display the relative amount of NAs for each variable in percentage (the default) or the total number of NAs.</p> <pre><code>from overviewpy.overviewpy import overview_na\nimport pandas as pd\nimport numpy as np\n\ndata_na = {\n        'id': ['RWA', 'RWA', 'RWA', np.nan, 'GAB', 'GAB',\\\n            'FRA', 'FRA', 'BEL', 'BEL', 'ARG', np.nan,  np.nan],\n        'year': [2022, 2001, 2000, 2023, 2021, 2023, 2020, \\\n            2019,  np.nan, 2015, 2014, 2013, 2002]\n    }\n\ndf_na = pd.DataFrame(data_na)\n\noverview_na(df_na)\n\n</code></pre>"},{"location":"#roadmap","title":"Roadmap","text":"<p><code>overviewpy</code> seeks to mirror the functionality of <code>overviewR</code> and will extend its features with the following functionality in the future:</p> <ul> <li><code>overview_crosstab</code> generates a cross table. The conditional column allows to disaggregate the overview table by specifying two conditions, hence resulting a 2x2 table. This way, it is easy to visualize the time and scope conditions as well as theoretical assumptions with examples from the data set.</li> <li><code>overview_latex</code> converts the output of both <code>overview_tab</code> and <code>overview_crosstab</code> into LaTeX code and/or directly into a .tex file.</li> <li><code>overview_plot</code> is an alternative to visualize the sample (a way to present results from <code>overview_tab</code>)</li> <li><code>overview_crossplot</code> is an alternative to visualize a cross table (a way to present results from <code>overview_crosstab</code>)</li> <li><code>overview_heat</code> plots a heat map of your time line</li> <li><code>overview_overlap</code> plots comparison plots (bar graph and Venn diagram) to compare to data frames</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Interested in contributing? Check out the contributing guidelines. Please note that this project is released with a Code of Conduct. By contributing to this project, you agree to abide by its terms.</p>"},{"location":"#license","title":"License","text":"<p><code>overviewpy</code> is licensed under the terms of the BSD 3-Clause license.</p>"},{"location":"#credits","title":"Credits","text":"<p><code>overviewpy</code> was created with <code>cookiecutter</code> and the <code>py-pkgs-cookiecutter</code> template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v011-06102023","title":"v0.1.1 (06/10/2023)","text":"<ul> <li>Fixed minor bug in <code>overview_tab</code> causing problems in running the function using the <code>id</code> parameter</li> <li>Also taking automatically care of duplicates in <code>overview_tab</code> now - so you don't have to do it manually when running the function </li> </ul>"},{"location":"changelog/#v010-18072023","title":"v0.1.0 (18/07/2023)","text":"<ul> <li>First release of <code>overviewpy</code>!</li> </ul>"},{"location":"conduct/","title":"Code of Conduct","text":""},{"location":"conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant homepage, version 1.4.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>You can never have enough documentation! Please feel free to contribute to any part of the documentation, such as the official docs, docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>overviewpy</code> for local development.</p> <ol> <li>Download a copy of <code>overviewpy</code> locally.</li> <li> <p>Install <code>overviewpy</code> using <code>poetry</code>:</p> <p><code>console $ poetry install</code></p> </li> <li> <p>Use <code>git</code> (or similar) to create a branch for local development and make your changes:</p> <p><code>console $ git checkout -b name-of-your-bugfix-or-feature</code></p> </li> <li> <p>When you're done making changes, check that your changes conform to any code formatting requirements and pass any tests.</p> </li> <li> <p>Commit your changes and open a pull request.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include additional tests if appropriate.</li> <li>If the pull request adds functionality, the docs should be updated.</li> <li>The pull request should work for all currently supported operating systems and versions of Python.</li> </ol>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please note that the <code>overviewpy</code> project is released with a Code of Conduct. By contributing to this project you agree to abide by its terms.</p>"},{"location":"example/","title":"Getting started","text":"In\u00a0[1]: Copied! <pre>from overviewpy.overviewpy import overview_tab, overview_na\nimport pandas as pd\nimport numpy as np\n</pre> from overviewpy.overviewpy import overview_tab, overview_na import pandas as pd import numpy as np In\u00a0[2]: Copied! <pre># Generate full data\n\ndata = {\n        'id': ['RWA', 'RWA', 'RWA', 'GAB', 'GAB', 'FRA',\\\n            'FRA', 'BEL', 'BEL', 'ARG'],\n        'year': [2022, 2023, 2021, 2023, 2020, 2019, 2015,\\\n            2014, 2013, 2002]\n    }\n\ndf = pd.DataFrame(data)\n\ndf.head()\n</pre> # Generate full data  data = {         'id': ['RWA', 'RWA', 'RWA', 'GAB', 'GAB', 'FRA',\\             'FRA', 'BEL', 'BEL', 'ARG'],         'year': [2022, 2023, 2021, 2023, 2020, 2019, 2015,\\             2014, 2013, 2002]     }  df = pd.DataFrame(data)  df.head() Out[2]: id year 0 RWA 2022 1 RWA 2023 2 RWA 2021 3 GAB 2023 4 GAB 2020 In\u00a0[3]: Copied! <pre># Generate data with missing values\n\ndata_na = {\n        'id': ['RWA', 'RWA', 'RWA', np.nan, 'GAB', 'GAB',\\\n            'FRA', 'FRA', 'BEL', 'BEL', 'ARG', np.nan,  np.nan],\n        'year': [2022, 2001, 2000, 2023, 2021, 2023, 2020,\\\n            2019,  np.nan, 2015, 2014, 2013, 2002]\n    }\n\ndf_na = pd.DataFrame(data_na)\n\ndf_na.head()\n</pre> # Generate data with missing values  data_na = {         'id': ['RWA', 'RWA', 'RWA', np.nan, 'GAB', 'GAB',\\             'FRA', 'FRA', 'BEL', 'BEL', 'ARG', np.nan,  np.nan],         'year': [2022, 2001, 2000, 2023, 2021, 2023, 2020,\\             2019,  np.nan, 2015, 2014, 2013, 2002]     }  df_na = pd.DataFrame(data_na)  df_na.head() Out[3]: id year 0 RWA 2022.0 1 RWA 2001.0 2 RWA 2000.0 3 NaN 2023.0 4 GAB 2021.0 In\u00a0[4]: Copied! <pre>df_overview = overview_tab(df=df, id='id', time='year')\n\nprint(df_overview)\n</pre> df_overview = overview_tab(df=df, id='id', time='year')  print(df_overview) <pre>    id  time_frame\n9  ARG        2002\n7  BEL   2013-2014\n5  FRA  2015, 2019\n3  GAB  2020, 2023\n0  RWA   2021-2023\n</pre> <pre>/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/overviewpy/overviewpy.py:70: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value '2002' has dtype incompatible with float64, please explicitly cast to a compatible dtype first.\n  df_no_dup.loc[group_df.index, 'time_frame'] = combined_str\n</pre> In\u00a0[5]: Copied! <pre>overview_na(df_na)\n</pre> overview_na(df_na)"},{"location":"example/#getting-started","title":"Getting started\u00b6","text":"<p>Here we will demonstrate how to use <code>overviewpy</code> in a project:</p>"},{"location":"example/#import-libraries","title":"Import libraries\u00b6","text":""},{"location":"example/#generate-data","title":"Generate data\u00b6","text":"<p>In the first step, we will generate some data that we will use in the next steps.</p>"},{"location":"example/#get-an-overview-of-the-time-distribution-in-your-data","title":"Get an overview of the time distribution in your data\u00b6","text":"<p>Generate some general overview of the data set using the time and scope conditions with <code>overview_tab</code>. The resulting data frame collapses the time condition for each id by taking into account potential gaps in the time frame.</p>"},{"location":"example/#get-an-overview-of-missing-data-in-your-data-frame","title":"Get an overview of missing data in your data frame\u00b6","text":"<p><code>overview_na</code> is a simple function that provides information about the content of all variables in your data, not only the time and scope conditions. It returns a horizontal ggplot bar plot that indicates the amount of missing data (NAs) for each variable (on the y-axis). You can choose whether to display the relative amount of NAs for each variable in percentage (the default) or the total number of NAs.</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#overviewpy.overviewpy.overview_na","title":"<code>overview_na(df)</code>","text":"<p>Plots an overview of missing values by variable.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Input data frame</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>matplotlib.figure.Figure: Bar plot visualizing the number of missing values per variable</p> Source code in <code>overviewpy/overviewpy.py</code> <pre><code>def overview_na(df: pd.DataFrame) -&gt; matplotlib.figure.Figure:\n    \"\"\"Plots an overview of missing values by variable.\n\n    Args:\n        df (pd.DataFrame): Input data frame\n\n    Returns:\n        matplotlib.figure.Figure: Bar plot visualizing the number of missing values per variable\n    \"\"\"\n    ax = df.isna().sum().plot(kind=\"barh\")\n    ax.set_xlabel(\"Count\")\n    ax.set_ylabel(\"Columns\")\n    plt.title(\"Missing Values Overview\")\n    plt.show()\n</code></pre>"},{"location":"reference/#overviewpy.overviewpy.overview_tab","title":"<code>overview_tab(df, id, time)</code>","text":"<p>Generates a tabular overview of the sample (and returns a data frame).  The general sample plots a two-column table that provides information on an  id in the left column and a the time frame on the right column.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Input data frame</p> required <code>id</code> <code>str</code> <p>Identifies the id column (for instance, country)</p> required <code>time</code> <code>int</code> <p>Identifies the time column (for instance, years).          This argument can currently handle simple digits          (YYYY or YY, for instance).         More complex dates (YYYY-MM-DD, for instance) is          planned as a future feature.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: Returns a reduced data frame that shows a cohesive</p> <code>DataFrame</code> <p>overview of the data frame</p> Source code in <code>overviewpy/overviewpy.py</code> <pre><code>def overview_tab(df: pd.DataFrame, id: str, time: int) -&gt; pd.DataFrame:\n    \"\"\"Generates a tabular overview of the sample (and returns a data frame). \n    The general sample plots a two-column table that provides information on an \n    id in the left column and a the time frame on the right column.\n\n    Args:\n        df (pd.DataFrame): Input data frame\n        id (str): Identifies the id column (for instance, country)\n        time (int): Identifies the time column (for instance, years). \n                    This argument can currently handle simple digits \n                    (YYYY or YY, for instance).\n                    More complex dates (YYYY-MM-DD, for instance) is \n                    planned as a future feature.\n\n    Returns:\n        pd.DataFrame: Returns a reduced data frame that shows a cohesive\n        overview of the data frame\n    \"\"\"\n\n    df2 = df.dropna(subset=[id]).copy()\n    if len(df2) != len(df):\n        print(\"There is at least one missing value in your id variable. The missing value is automatically deleted.\")\n\n    df_no_dup = df2.filter(items=[id, time]).drop_duplicates()\n\n    if len(df_no_dup) != len(df2):\n        print(\"There are some duplicates. We aggregate the data before proceeding.\")\n\n    df_sorted = df_no_dup.sort_values([id, time])\n\n    # Group the DataFrame by the ID column\n    grouped = df_sorted.groupby(id)\n\n    # Initialize the combined column\n    df['time_frame'] = df_no_dup[time].astype(str)\n\n    # Check if numbers within each group are consecutive and combine them\n    for _, group_df in grouped:\n        numbers = group_df[time].tolist()\n\n        combined_str = \"\"\n\n        if len(numbers) &gt; 1:\n            consecutive_ranges = []\n            current_range = [numbers[0]]\n\n            for i in range(1, len(numbers)):\n                if numbers[i] == numbers[i-1] + 1:\n                    current_range.append(numbers[i])\n                else:\n                    if len(current_range) &gt; 1:\n                        consecutive_ranges.append(f'{current_range[0]}-{current_range[-1]}')\n                    else:\n                        consecutive_ranges.append(str(current_range[0]))\n                    current_range = [numbers[i]]\n\n            if len(current_range) &gt; 1:\n                consecutive_ranges.append(f'{current_range[0]}-{current_range[-1]}')\n            else:\n                consecutive_ranges.append(str(current_range[0]))\n\n            combined_str = ', '.join(consecutive_ranges)\n        else:\n            combined_str = str(numbers[0])\n\n        df_no_dup.loc[group_df.index, 'time_frame'] = combined_str\n\n    return df_no_dup[[id, 'time_frame']].sort_values([id]).drop_duplicates()\n</code></pre>"},{"location":"_build/jupyter_execute/example/","title":"Example usage","text":"In\u00a0[1]: Copied! <pre>from overviewpy.overviewpy import overview_tab, overview_na\nimport pandas as pd\nimport numpy as np\n</pre> from overviewpy.overviewpy import overview_tab, overview_na import pandas as pd import numpy as np In\u00a0[2]: Copied! <pre># Generate full data\n\ndata = {\n        'id': ['RWA', 'RWA', 'RWA', 'GAB', 'GAB', 'FRA', 'FRA', 'BEL', 'BEL', 'ARG'],\n        'year': [2022, 2023, 2021, 2023, 2020, 2019, 2015, 2014, 2013, 2002]\n    }\n\ndf = pd.DataFrame(data)\n\ndf.head()\n</pre> # Generate full data  data = {         'id': ['RWA', 'RWA', 'RWA', 'GAB', 'GAB', 'FRA', 'FRA', 'BEL', 'BEL', 'ARG'],         'year': [2022, 2023, 2021, 2023, 2020, 2019, 2015, 2014, 2013, 2002]     }  df = pd.DataFrame(data)  df.head() Out[2]: id year 0 RWA 2022 1 RWA 2023 2 RWA 2021 3 GAB 2023 4 GAB 2020 In\u00a0[3]: Copied! <pre># Generate data with missing values\n\ndata_na = {\n        'id': ['RWA', 'RWA', 'RWA', np.nan, 'GAB', 'GAB', 'FRA', 'FRA', 'BEL', 'BEL', 'ARG', np.nan,  np.nan],\n        'year': [2022, 2001, 2000, 2023, 2021, 2023, 2020, 2019,  np.nan, 2015, 2014, 2013, 2002]\n    }\n\ndf_na = pd.DataFrame(data_na)\n</pre> # Generate data with missing values  data_na = {         'id': ['RWA', 'RWA', 'RWA', np.nan, 'GAB', 'GAB', 'FRA', 'FRA', 'BEL', 'BEL', 'ARG', np.nan,  np.nan],         'year': [2022, 2001, 2000, 2023, 2021, 2023, 2020, 2019,  np.nan, 2015, 2014, 2013, 2002]     }  df_na = pd.DataFrame(data_na) In\u00a0[4]: Copied! <pre>df_overview = overview_tab(df=df, id='id', time='year')\n\nprint(df_overview)\n</pre> df_overview = overview_tab(df=df, id='id', time='year')  print(df_overview) <pre>    id  time_frame\n9  ARG        2002\n7  BEL   2013-2014\n5  FRA  2015, 2019\n3  GAB  2020, 2023\n0  RWA   2021-2023\n</pre> <pre>/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/overviewpy/overviewpy.py:70: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value '2002' has dtype incompatible with float64, please explicitly cast to a compatible dtype first.\n  df_no_dup.loc[group_df.index, 'time_frame'] = combined_str\n</pre> In\u00a0[5]: Copied! <pre>overview_na(df_na)\n</pre> overview_na(df_na)"},{"location":"_build/jupyter_execute/example/#example-usage","title":"Example usage\u00b6","text":"<p>Here we will demonstrate how to use <code>overviewpy</code> in a project:</p>"},{"location":"_build/jupyter_execute/example/#import-libraries","title":"Import libraries\u00b6","text":""},{"location":"_build/jupyter_execute/example/#generate-data","title":"Generate data\u00b6","text":"<p>In the first step, we will generate some data that we will use in the next steps.</p>"},{"location":"_build/jupyter_execute/example/#get-an-overview-of-the-time-distribution-in-your-data","title":"Get an overview of the time distribution in your data\u00b6","text":"<p>Generate some general overview of the data set using the time and scope conditions with <code>overview_tab</code>. The resulting data frame collapses the time condition for each id by taking into account potential gaps in the time frame.</p>"},{"location":"_build/jupyter_execute/example/#get-an-overview-of-missing-data-in-your-data-frame","title":"Get an overview of missing data in your data frame\u00b6","text":"<p><code>overview_na</code> is a simple function that provides information about the content of all variables in your data, not only the time and scope conditions. It returns a horizontal ggplot bar plot that indicates the amount of missing data (NAs) for each variable (on the y-axis). You can choose whether to display the relative amount of NAs for each variable in percentage (the default) or the total number of NAs.</p>"}]}